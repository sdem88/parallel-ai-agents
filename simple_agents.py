#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
from typing import List, Dict, Any
import json

class SimpleAgent:
    """–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    
    def __init__(self, name: str, skills: List[str]):
        self.name = name
        self.skills = skills
        
    async def work(self, task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É"""
        print(f"ü§ñ {self.name}: –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ '{task}'")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(1)
        
        result = {
            "agent": self.name,
            "task": task,
            "status": "completed",
            "result": f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task}"
        }
        
        print(f"‚úÖ {self.name}: –ó–∞–≤–µ—Ä—à–∏–ª '{task}'")
        return result

class AgentTeam:
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.agents = {
            "researcher": SimpleAgent("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å üîç", ["–ø–æ–∏—Å–∫", "–∞–Ω–∞–ª–∏–∑", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]),
            "coder": SimpleAgent("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üíª", ["–∫–æ–¥", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]),
            "tester": SimpleAgent("–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ üß™", ["—Ç–µ—Å—Ç—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–æ—Ç–ª–∞–¥–∫–∞"]),
            "reviewer": SimpleAgent("–†–µ–≤—å—é–µ—Ä üìã", ["–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"])
        }
        
    async def execute_parallel(self, tasks: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...\n")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        coroutines = []
        for task_info in tasks:
            agent_name = task_info["agent"]
            task = task_info["task"]
            
            if agent_name in self.agents:
                agent = self.agents[agent_name]
                coroutines.append(agent.work(task))
            else:
                print(f"‚ö†Ô∏è  –ê–≥–µ–Ω—Ç '{agent_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*coroutines)
        
        print("\n‚ú® –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n")
        return results
    
    def show_agents(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
        for name, agent in self.agents.items():
            print(f"  - {name}: {agent.name}")
            print(f"    –ù–∞–≤—ã–∫–∏: {', '.join(agent.skills)}")

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def run_tasks(tasks: List[Dict[str, str]]):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏"""
    team = AgentTeam()
    results = await team.execute_parallel(tasks)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, result in enumerate(results, 1):
        print(f"\n{i}. {result['agent']}:")
        print(f"   –ó–∞–¥–∞—á–∞: {result['task']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['result']}")
    
    return results

def create_task(agent: str, task: str) -> Dict[str, str]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    return {"agent": agent, "task": task}

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    print("=== –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ ===")
    
    tasks = [
        create_task("researcher", "–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ REST API"),
        create_task("coder", "–ù–∞–ø–∏—Å–∞—Ç—å –±–∞–∑–æ–≤—ã–π CRUD –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"),
        create_task("tester", "–°–æ–∑–¥–∞—Ç—å unit —Ç–µ—Å—Ç—ã"),
        create_task("reviewer", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞")
    ]
    
    asyncio.run(run_tasks(tasks))
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∫–∞–∑–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
    print("\n=== –ü–†–ò–ú–ï–† 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–∞—Ö ===")
    team = AgentTeam()
    team.show_agents()