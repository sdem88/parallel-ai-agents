"""
üöÄ Universal AI Agent System - Ultimate Backend
–¢–æ–ø–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –ª—É—á—à–∏—Ö AI –º–æ–¥–µ–ª–µ–π
"""

import os
import asyncio
import sqlite3
import json
import uuid
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union
from pathlib import Path

from fastapi import FastAPI, WebSocket, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
import uvicorn

# AI Providers
import openai
import anthropic
import google.generativeai as genai
from openai import AsyncOpenAI

# Logging and monitoring
import logging
import structlog
from prometheus_client import Counter, Histogram, generate_latest

# Configure structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.JSONRenderer()
    ],
    wrapper_class=structlog.stdlib.LoggerFactory(),
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

# Prometheus metrics
task_counter = Counter('agent_tasks_total', 'Total number of tasks', ['agent_type', 'status'])
task_duration = Histogram('agent_task_duration_seconds', 'Task execution time')

app = FastAPI(
    title="ü§ñ Universal AI Agent System",
    description="–¢–æ–ø–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ò–ò –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π –º–∏—Ä–∞",
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()

# Database setup
DB_PATH = "ultimate_agents.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            username TEXT UNIQUE,
            email TEXT UNIQUE,
            api_key TEXT UNIQUE,
            plan TEXT DEFAULT 'free',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_active TIMESTAMP,
            settings TEXT DEFAULT '{}'
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–≥–µ–Ω—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS agents (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            description TEXT,
            system_prompt TEXT,
            skills TEXT,
            ai_provider TEXT DEFAULT 'simulation',
            model_name TEXT,
            user_id TEXT,
            is_public BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            usage_count INTEGER DEFAULT 0,
            rating REAL DEFAULT 0.0
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id TEXT PRIMARY KEY,
            agent_id TEXT,
            user_id TEXT,
            task_description TEXT,
            status TEXT DEFAULT 'pending',
            result TEXT,
            error TEXT,
            ai_provider TEXT,
            model_used TEXT,
            tokens_used INTEGER DEFAULT 0,
            execution_time_ms INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            started_at TIMESTAMP,
            completed_at TIMESTAMP,
            priority INTEGER DEFAULT 5,
            workflow_id TEXT,
            parent_task_id TEXT,
            metadata TEXT DEFAULT '{}'
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤–æ—Ä–∫—Ñ–ª–æ—É
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workflows (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            description TEXT,
            config TEXT,
            user_id TEXT,
            is_template BOOLEAN DEFAULT FALSE,
            is_public BOOLEAN DEFAULT FALSE,
            category TEXT,
            tags TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            usage_count INTEGER DEFAULT 0,
            rating REAL DEFAULT 0.0
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ai_providers (
            id TEXT PRIMARY KEY,
            user_id TEXT,
            provider_name TEXT,
            api_key_encrypted TEXT,
            model_preferences TEXT DEFAULT '{}',
            usage_stats TEXT DEFAULT '{}',
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_used TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            description TEXT,
            category TEXT,
            difficulty TEXT DEFAULT 'beginner',
            steps TEXT,
            estimated_time INTEGER,
            tags TEXT,
            author_id TEXT,
            is_verified BOOLEAN DEFAULT FALSE,
            usage_count INTEGER DEFAULT 0,
            rating REAL DEFAULT 0.0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized successfully")

# Pydantic models
class AgentConfig(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    system_prompt: str = Field(..., min_length=10, max_length=2000)
    skills: List[str] = Field(default_factory=list)
    ai_provider: str = Field(default="simulation")
    model_name: Optional[str] = None
    is_public: bool = False

class TaskRequest(BaseModel):
    agent_id: str
    task_description: str = Field(..., min_length=1, max_length=1000)
    priority: int = Field(default=5, ge=1, le=10)
    ai_provider: Optional[str] = None
    model_override: Optional[str] = None
    workflow_id: Optional[str] = None
    parent_task_id: Optional[str] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)

class WorkflowRequest(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    tasks: List[TaskRequest]
    execution_mode: str = Field(default="parallel", regex="^(parallel|sequential)$")
    is_template: bool = False
    category: Optional[str] = None
    tags: List[str] = Field(default_factory=list)

class AIProviderConfig(BaseModel):
    provider_name: str
    api_key: str
    model_preferences: Dict[str, Any] = Field(default_factory=dict)

# AI Provider Manager
class AIProviderManager:
    def __init__(self):
        self.providers = {}
        self.models = {
            "openai": {
                "gpt-4o": {"context": 128000, "output": 4096, "cost_per_1k": 0.005},
                "gpt-4o-mini": {"context": 128000, "output": 16384, "cost_per_1k": 0.00015},
                "o3-mini": {"context": 128000, "output": 65536, "cost_per_1k": 0.002},  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                "gpt-4-turbo": {"context": 128000, "output": 4096, "cost_per_1k": 0.01}
            },
            "anthropic": {
                "claude-3-opus-20240229": {"context": 200000, "output": 4096, "cost_per_1k": 0.015},
                "claude-3-sonnet-20240229": {"context": 200000, "output": 4096, "cost_per_1k": 0.003},
                "claude-3-haiku-20240307": {"context": 200000, "output": 4096, "cost_per_1k": 0.00025}
            },
            "google": {
                "gemini-2.0-flash-exp": {"context": 1000000, "output": 8192, "cost_per_1k": 0.0015},
                "gemini-1.5-pro": {"context": 2000000, "output": 8192, "cost_per_1k": 0.00125},
                "gemini-1.5-flash": {"context": 1000000, "output": 8192, "cost_per_1k": 0.000075}
            },
            "openrouter": {
                "anthropic/claude-3-opus": {"context": 200000, "output": 4096, "cost_per_1k": 0.018},
                "openai/gpt-4-turbo": {"context": 128000, "output": 4096, "cost_per_1k": 0.012},
                "google/gemini-pro-1.5": {"context": 1000000, "output": 8192, "cost_per_1k": 0.0015}
            }
        }
        
    async def setup_provider(self, provider_name: str, api_key: str, user_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            if provider_name == "openai":
                client = AsyncOpenAI(api_key=api_key)
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await client.models.list()
                self.providers[f"{user_id}_{provider_name}"] = client
                
            elif provider_name == "anthropic":
                client = anthropic.AsyncAnthropic(api_key=api_key)
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await client.messages.create(
                    model="claude-3-haiku-20240307",
                    max_tokens=10,
                    messages=[{"role": "user", "content": "Hi"}]
                )
                self.providers[f"{user_id}_{provider_name}"] = client
                
            elif provider_name == "google":
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel('gemini-1.5-flash')
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                response = model.generate_content("Hi")
                self.providers[f"{user_id}_{provider_name}"] = model
                
            elif provider_name == "openrouter":
                client = AsyncOpenAI(
                    base_url="https://openrouter.ai/api/v1",
                    api_key=api_key,
                )
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await client.models.list()
                self.providers[f"{user_id}_{provider_name}"] = client
                
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO ai_providers 
                (id, user_id, provider_name, api_key_encrypted, is_active, last_used)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                f"{user_id}_{provider_name}",
                user_id,
                provider_name,
                api_key,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
                True,
                datetime.now().isoformat()
            ))
            conn.commit()
            conn.close()
            
            logger.info("AI provider configured", provider=provider_name, user_id=user_id)
            return True
            
        except Exception as e:
            logger.error("Failed to setup AI provider", 
                        provider=provider_name, user_id=user_id, error=str(e))
            raise HTTPException(status_code=400, detail=f"Failed to setup {provider_name}: {str(e)}")
    
    async def execute_with_ai(self, provider_name: str, model: str, system_prompt: str, 
                            user_prompt: str, user_id: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        provider_key = f"{user_id}_{provider_name}"
        
        if provider_key not in self.providers:
            raise HTTPException(status_code=400, detail=f"Provider {provider_name} not configured")
        
        start_time = time.time()
        
        try:
            if provider_name == "openai":
                client = self.providers[provider_key]
                response = await client.chat.completions.create(
                    model=model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=4000
                )
                
                result = {
                    "content": response.choices[0].message.content,
                    "model": model,
                    "tokens_used": response.usage.total_tokens,
                    "cost": self._calculate_cost(provider_name, model, response.usage.total_tokens)
                }
                
            elif provider_name == "anthropic":
                client = self.providers[provider_key]
                response = await client.messages.create(
                    model=model,
                    max_tokens=4000,
                    temperature=0.7,
                    system=system_prompt,
                    messages=[{"role": "user", "content": user_prompt}]
                )
                
                result = {
                    "content": response.content[0].text,
                    "model": model,
                    "tokens_used": response.usage.input_tokens + response.usage.output_tokens,
                    "cost": self._calculate_cost(provider_name, model, 
                                               response.usage.input_tokens + response.usage.output_tokens)
                }
                
            elif provider_name == "google":
                model_client = self.providers[provider_key]
                full_prompt = f"System: {system_prompt}\n\nUser: {user_prompt}"
                response = model_client.generate_content(full_prompt)
                
                result = {
                    "content": response.text,
                    "model": model,
                    "tokens_used": len(full_prompt.split()) * 1.3,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                    "cost": self._calculate_cost(provider_name, model, len(full_prompt.split()) * 1.3)
                }
                
            elif provider_name == "openrouter":
                client = self.providers[provider_key]
                response = await client.chat.completions.create(
                    model=model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=4000
                )
                
                result = {
                    "content": response.choices[0].message.content,
                    "model": model,
                    "tokens_used": response.usage.total_tokens if response.usage else 0,
                    "cost": self._calculate_cost(provider_name, model, 
                                               response.usage.total_tokens if response.usage else 0)
                }
            
            execution_time = int((time.time() - start_time) * 1000)
            result["execution_time_ms"] = execution_time
            
            logger.info("AI task completed", 
                       provider=provider_name, model=model, 
                       tokens=result["tokens_used"], time_ms=execution_time)
            
            return result
            
        except Exception as e:
            logger.error("AI execution failed", 
                        provider=provider_name, model=model, error=str(e))
            raise HTTPException(status_code=500, detail=f"AI execution failed: {str(e)}")
    
    def _calculate_cost(self, provider: str, model: str, tokens: int) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        if provider in self.models and model in self.models[provider]:
            cost_per_1k = self.models[provider][model]["cost_per_1k"]
            return (tokens / 1000) * cost_per_1k
        return 0.0

# Global AI manager
ai_manager = AIProviderManager()

# Agent System
class UniversalAgent:
    def __init__(self, agent_data: Dict[str, Any]):
        self.id = agent_data["id"]
        self.name = agent_data["name"]
        self.description = agent_data.get("description", "")
        self.system_prompt = agent_data.get("system_prompt", "")
        self.skills = json.loads(agent_data.get("skills", "[]"))
        self.ai_provider = agent_data.get("ai_provider", "simulation")
        self.model_name = agent_data.get("model_name")
        self.user_id = agent_data.get("user_id")
        self.status = "idle"
        self.current_task = None
    
    async def execute_task(self, task: TaskRequest, user_id: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º"""
        self.status = "working"
        self.current_task = task.task_description
        
        start_time = time.time()
        task_id = str(uuid.uuid4())
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
            provider = task.ai_provider or self.ai_provider
            model = task.model_override or self.model_name
            
            if provider == "simulation":
                # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                await asyncio.sleep(2)
                result_content = f"‚úÖ {self.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É: {task.task_description}"
                tokens_used = 0
                cost = 0.0
            else:
                # –†–µ–∞–ª—å–Ω—ã–π AI –∑–∞–ø—Ä–æ—Å
                if not model:
                    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_models = {
                        "openai": "gpt-4o-mini",
                        "anthropic": "claude-3-haiku-20240307", 
                        "google": "gemini-1.5-flash",
                        "openrouter": "openai/gpt-4-turbo"
                    }
                    model = default_models.get(provider, "gpt-4o-mini")
                
                ai_result = await ai_manager.execute_with_ai(
                    provider, model, self.system_prompt, 
                    task.task_description, user_id
                )
                
                result_content = ai_result["content"]
                tokens_used = ai_result["tokens_used"]
                cost = ai_result["cost"]
            
            execution_time = int((time.time() - start_time) * 1000)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É
            result = {
                "task_id": task_id,
                "agent_id": self.id,
                "agent_name": self.name,
                "task": task.task_description,
                "status": "completed",
                "result": result_content,
                "ai_provider": provider,
                "model_used": model,
                "tokens_used": tokens_used,
                "cost": cost,
                "execution_time_ms": execution_time,
                "timestamp": datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO tasks 
                (id, agent_id, user_id, task_description, status, result, 
                 ai_provider, model_used, tokens_used, execution_time_ms, 
                 started_at, completed_at, priority, workflow_id, metadata)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                task_id, self.id, user_id, task.task_description, "completed", result_content,
                provider, model, tokens_used, execution_time,
                start_time, time.time(), task.priority, task.workflow_id, 
                json.dumps(task.metadata)
            ))
            conn.commit()
            conn.close()
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            task_counter.labels(agent_type=self.id, status="completed").inc()
            task_duration.observe(execution_time / 1000)
            
            logger.info("Task completed successfully", 
                       task_id=task_id, agent_id=self.id, 
                       execution_time_ms=execution_time, tokens=tokens_used)
            
            return result
            
        except Exception as e:
            execution_time = int((time.time() - start_time) * 1000)
            
            error_result = {
                "task_id": task_id,
                "agent_id": self.id,
                "agent_name": self.name,
                "task": task.task_description,
                "status": "failed",
                "error": str(e),
                "execution_time_ms": execution_time,
                "timestamp": datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –±–∞–∑—É
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO tasks 
                (id, agent_id, user_id, task_description, status, error, 
                 execution_time_ms, started_at, priority, workflow_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                task_id, self.id, user_id, task.task_description, "failed", str(e),
                execution_time, start_time, task.priority, task.workflow_id
            ))
            conn.commit()
            conn.close()
            
            task_counter.labels(agent_type=self.id, status="failed").inc()
            
            logger.error("Task failed", task_id=task_id, agent_id=self.id, error=str(e))
            
            return error_result
        
        finally:
            self.status = "idle"
            self.current_task = None

# Agent System Manager
class AgentSystemManager:
    def __init__(self):
        self.active_agents = {}
        self.load_agents()
    
    def load_agents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("SELECT COUNT(*) FROM agents")
        if cursor.fetchone()[0] == 0:
            self._create_default_agents()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT * FROM agents")
        agents_data = cursor.fetchall()
        
        for agent_data in agents_data:
            agent_dict = {
                "id": agent_data[0],
                "name": agent_data[1], 
                "description": agent_data[2],
                "system_prompt": agent_data[3],
                "skills": agent_data[4],
                "ai_provider": agent_data[5],
                "model_name": agent_data[6],
                "user_id": agent_data[7]
            }
            self.active_agents[agent_data[0]] = UniversalAgent(agent_dict)
        
        conn.close()
        logger.info("Loaded agents", count=len(self.active_agents))
    
    def _create_default_agents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_agents = [
            {
                "id": "researcher",
                "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å üîç",
                "description": "–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                "system_prompt": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Ç–µ–ø–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                "skills": '["–ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤", "fact-checking"]',
                "ai_provider": "openai",
                "model_name": "gpt-4o-mini"
            },
            {
                "id": "coder",
                "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üíª", 
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞",
                "system_prompt": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –ü–∏—à–µ—à—å —á–∏—Å—Ç—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥. –°–ª–µ–¥—É–µ—à—å –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID.",
                "skills": '["Python", "JavaScript", "TypeScript", "React", "FastAPI", "SQL", "Git"]',
                "ai_provider": "anthropic",
                "model_name": "claude-3-sonnet-20240229"
            },
            {
                "id": "designer",
                "name": "–î–∏–∑–∞–π–Ω–µ—Ä üé®",
                "description": "UI/UX –¥–∏–∑–∞–π–Ω –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                "system_prompt": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. –°–æ–∑–¥–∞–µ—à—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.",
                "skills": '["UI/UX –¥–∏–∑–∞–π–Ω", "–ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è"]',
                "ai_provider": "google",
                "model_name": "gemini-1.5-flash"
            },
            {
                "id": "analyst",
                "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫ üìä",
                "description": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏",
                "system_prompt": "–¢—ã –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –£–º–µ–µ—à—å –≤—ã—è–≤–ª—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.",
                "skills": '["–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "SQL", "Excel", "–±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "KPI", "A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]',
                "ai_provider": "openai",
                "model_name": "gpt-4o"
            },
            {
                "id": "writer",
                "name": "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä ‚úçÔ∏è",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                "system_prompt": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä. –°–æ–∑–¥–∞–µ—à—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º. –ü–æ–Ω–∏–º–∞–µ—à—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.",
                "skills": '["–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", "–∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "SEO", "—Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", "email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"]',
                "ai_provider": "anthropic",
                "model_name": "claude-3-opus-20240229"
            },
            {
                "id": "tester",
                "name": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ üß™",
                "description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ü–û",
                "system_prompt": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π QA-–∏–Ω–∂–µ–Ω–µ—Ä —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—Ö–æ–¥–∏—à—å –±–∞–≥–∏, —Å–æ–∑–¥–∞–µ—à—å —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—à—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                "skills": '["—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤", "—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "bug tracking"]',
                "ai_provider": "google",
                "model_name": "gemini-1.5-pro"
            }
        ]
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        for agent in default_agents:
            cursor.execute('''
                INSERT INTO agents 
                (id, name, description, system_prompt, skills, ai_provider, model_name, user_id, is_public)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                agent["id"], agent["name"], agent["description"], agent["system_prompt"],
                agent["skills"], agent["ai_provider"], agent["model_name"], "system", True
            ))
        
        conn.commit()
        conn.close()
        logger.info("Created default agents")

# Global agent manager
agent_manager = AgentSystemManager()

# WebSocket connections
active_connections: List[WebSocket] = []

# Initialize database
init_database()

# API Endpoints
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse("/Users/sergeidemchuk/agents-system/frontend/ultimate_ui.html")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "agents_count": len(agent_manager.active_agents),
        "connections": len(active_connections)
    }

@app.get("/api/metrics")
async def get_metrics():
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏"""
    return Response(generate_latest(), media_type="text/plain")

@app.get("/api/agents")
async def get_agents(user_id: str = "demo"):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    agents_info = []
    for agent_id, agent in agent_manager.active_agents.items():
        agents_info.append({
            "id": agent.id,
            "name": agent.name,
            "description": agent.description,
            "skills": agent.skills,
            "ai_provider": agent.ai_provider,
            "model_name": agent.model_name,
            "status": agent.status,
            "current_task": agent.current_task,
            "is_custom": not agent.id in ["researcher", "coder", "designer", "analyst", "writer", "tester"]
        })
    
    return {"agents": agents_info}

@app.post("/api/agents")
async def create_agent(config: AgentConfig, user_id: str = "demo"):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    agent_id = f"agent_{uuid.uuid4().hex[:8]}"
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO agents 
        (id, name, description, system_prompt, skills, ai_provider, model_name, user_id, is_public)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        agent_id, config.name, config.description, config.system_prompt,
        json.dumps(config.skills), config.ai_provider, config.model_name, 
        user_id, config.is_public
    ))
    conn.commit()
    conn.close()
    
    # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∞–≥–µ–Ω—Ç–∞
    agent_data = {
        "id": agent_id,
        "name": config.name,
        "description": config.description,
        "system_prompt": config.system_prompt,
        "skills": json.dumps(config.skills),
        "ai_provider": config.ai_provider,
        "model_name": config.model_name,
        "user_id": user_id
    }
    
    agent_manager.active_agents[agent_id] = UniversalAgent(agent_data)
    
    logger.info("Agent created", agent_id=agent_id, name=config.name, user_id=user_id)
    
    return {"agent_id": agent_id, "message": "Agent created successfully"}

@app.post("/api/tasks")
async def execute_task(task: TaskRequest, user_id: str = "demo"):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é –∑–∞–¥–∞—á—É"""
    if task.agent_id not in agent_manager.active_agents:
        raise HTTPException(status_code=404, detail="Agent not found")
    
    agent = agent_manager.active_agents[task.agent_id]
    result = await agent.execute_task(task, user_id)
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    for connection in active_connections:
        try:
            await connection.send_json(result)
        except:
            pass
    
    return result

@app.post("/api/workflows")
async def execute_workflow(workflow: WorkflowRequest, user_id: str = "demo"):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Ä–∫—Ñ–ª–æ—É"""
    workflow_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Ä–∫—Ñ–ª–æ—É –≤ –±–∞–∑—É
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO workflows 
        (id, name, description, config, user_id, is_template, category, tags)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        workflow_id, workflow.name, workflow.description,
        json.dumps(workflow.dict()), user_id, workflow.is_template,
        workflow.category, json.dumps(workflow.tags)
    ))
    conn.commit()
    conn.close()
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏
    results = []
    
    if workflow.execution_mode == "parallel":
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        tasks = []
        for task in workflow.tasks:
            task.workflow_id = workflow_id
            if task.agent_id in agent_manager.active_agents:
                agent = agent_manager.active_agents[task.agent_id]
                tasks.append(agent.execute_task(task, user_id))
        
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
    else:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        for task in workflow.tasks:
            task.workflow_id = workflow_id
            if task.agent_id in agent_manager.active_agents:
                agent = agent_manager.active_agents[task.agent_id]
                result = await agent.execute_task(task, user_id)
                results.append(result)
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                for connection in active_connections:
                    try:
                        await connection.send_json(result)
                    except:
                        pass
    
    logger.info("Workflow completed", workflow_id=workflow_id, 
                tasks_count=len(workflow.tasks), user_id=user_id)
    
    return {
        "workflow_id": workflow_id,
        "name": workflow.name,
        "execution_mode": workflow.execution_mode,
        "total_tasks": len(workflow.tasks),
        "results": results
    }

@app.post("/api/ai-providers")
async def setup_ai_provider(config: AIProviderConfig, user_id: str = "demo"):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    success = await ai_manager.setup_provider(config.provider_name, config.api_key, user_id)
    
    if success:
        return {"message": f"{config.provider_name} configured successfully"}
    else:
        raise HTTPException(status_code=400, detail="Failed to configure provider")

@app.get("/api/templates")
async def get_templates():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM templates ORDER BY usage_count DESC, rating DESC")
    templates_data = cursor.fetchall()
    conn.close()
    
    if not templates_data:
        # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        return {"templates": get_default_templates()}
    
    templates = []
    for template in templates_data:
        templates.append({
            "id": template[0],
            "name": template[1],
            "description": template[2],
            "category": template[3],
            "difficulty": template[4],
            "steps": json.loads(template[5]),
            "estimated_time": template[6],
            "tags": json.loads(template[7] or "[]"),
            "usage_count": template[9],
            "rating": template[10]
        })
    
    return {"templates": templates}

def get_default_templates():
    """–ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    return [
        {
            "id": "website-creation",
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞",
            "description": "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞",
            "category": "development",
            "difficulty": "intermediate",
            "estimated_time": 240,
            "steps": [
                {"agent_id": "analyst", "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∞–π—Ç—É –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"},
                {"agent_id": "designer", "task": "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω-–º–∞–∫–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"},
                {"agent_id": "coder", "task": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"},
                {"agent_id": "coder", "task": "–°–æ–∑–¥–∞—Ç—å –±—ç–∫–µ–Ω–¥ API –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"},
                {"agent_id": "writer", "task": "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞"},
                {"agent_id": "tester", "task": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"}
            ],
            "tags": ["–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ñ—É–ª–ª-—Å—Ç–µ–∫", "–¥–∏–∑–∞–π–Ω"]
        },
        {
            "id": "market-analysis", 
            "name": "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
            "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            "category": "business",
            "difficulty": "beginner",
            "estimated_time": 120,
            "steps": [
                {"agent_id": "researcher", "task": "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–µ —Ä—ã–Ω–∫–∞ –∏ —Ç—Ä–µ–Ω–¥–∞—Ö"},
                {"agent_id": "analyst", "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"},
                {"agent_id": "researcher", "task": "–ò–∑—É—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –±–æ–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"},
                {"agent_id": "analyst", "task": "–°–æ—Å—Ç–∞–≤–∏—Ç—å SWOT-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"}
            ],
            "tags": ["–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–±–∏–∑–Ω–µ—Å", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"]
        },
        {
            "id": "content-campaign",
            "name": "–ö–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–º–ø–∞–Ω–∏—è",
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–º–ø–∞–Ω–∏–∏",
            "category": "marketing", 
            "difficulty": "beginner",
            "estimated_time": 180,
            "steps": [
                {"agent_id": "analyst", "task": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ KPI –∫–∞–º–ø–∞–Ω–∏–∏"},
                {"agent_id": "writer", "task": "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü"},
                {"agent_id": "writer", "task": "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"},
                {"agent_id": "designer", "task": "–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"},
                {"agent_id": "analyst", "task": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"}
            ],
            "tags": ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–∫–æ–Ω—Ç–µ–Ω—Ç", "SMM"]
        },
        {
            "id": "bug-fix",
            "name": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–≥–∞",
            "description": "–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –ø—Ä–æ–¥—É–∫—Ç–µ",
            "category": "development",
            "difficulty": "advanced",
            "estimated_time": 60,
            "steps": [
                {"agent_id": "analyst", "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É"},
                {"agent_id": "coder", "task": "–ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –±–∞–≥–∞"},
                {"agent_id": "tester", "task": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"},
                {"agent_id": "analyst", "task": "–ó–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"}
            ],
            "tags": ["–±–∞–≥", "–æ—Ç–ª–∞–¥–∫–∞", "—Å—Ä–æ—á–Ω–æ"]
        }
    ]

@app.get("/api/history")
async def get_task_history(limit: int = 50, user_id: str = "demo"):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT t.*, a.name as agent_name
        FROM tasks t
        LEFT JOIN agents a ON t.agent_id = a.id  
        WHERE t.user_id = ? OR t.user_id = 'system'
        ORDER BY t.created_at DESC
        LIMIT ?
    ''', (user_id, limit))
    
    tasks = []
    for row in cursor.fetchall():
        tasks.append({
            "task_id": row[0],
            "agent_id": row[1],
            "agent_name": row[-1] or "Unknown Agent",
            "task": row[3],
            "status": row[4],
            "result": row[5],
            "error": row[6],
            "ai_provider": row[7],
            "model_used": row[8],
            "tokens_used": row[9] or 0,
            "execution_time_ms": row[10] or 0,
            "created_at": row[11],
            "workflow_id": row[16]
        })
    
    conn.close()
    return {"history": tasks}

@app.get("/api/stats")
async def get_statistics(user_id: str = "demo"):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? OR user_id = 'system'", (user_id,))
    total_tasks = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'completed' AND (user_id = ? OR user_id = 'system')", (user_id,))
    completed_tasks = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM workflows WHERE user_id = ?", (user_id,))
    total_workflows = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM agents WHERE user_id = ? OR user_id = 'system'", (user_id,))
    total_agents = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
    cursor.execute('''
        SELECT ai_provider, COUNT(*), SUM(tokens_used), AVG(execution_time_ms)
        FROM tasks 
        WHERE user_id = ? OR user_id = 'system'
        GROUP BY ai_provider
    ''', (user_id,))
    
    ai_stats = []
    for row in cursor.fetchall():
        ai_stats.append({
            "provider": row[0],
            "tasks_count": row[1],
            "total_tokens": row[2] or 0,
            "avg_time_ms": int(row[3]) if row[3] else 0
        })
    
    conn.close()
    
    success_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
    
    return {
        "total_tasks": total_tasks,
        "completed_tasks": completed_tasks,
        "total_workflows": total_workflows,
        "total_agents": total_agents,
        "success_rate": round(success_rate, 1),
        "ai_providers_stats": ai_stats,
        "active_connections": len(active_connections)
    }

# WebSocket endpoint
@app.websocket("/api/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    active_connections.append(websocket)
    logger.info("WebSocket connection established")
    
    try:
        while True:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤—ã–º
            await asyncio.sleep(30)
            await websocket.send_json({"type": "ping", "timestamp": datetime.now().isoformat()})
    except Exception as e:
        logger.info("WebSocket connection closed", error=str(e))
    finally:
        if websocket in active_connections:
            active_connections.remove(websocket)

if __name__ == "__main__":
    uvicorn.run(
        "ultimate_backend:app",
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 8000)),
        reload=False,
        log_level="info"
    )