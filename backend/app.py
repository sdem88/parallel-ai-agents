from fastapi import FastAPI, WebSocket, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import asyncio
import json
import uuid
from datetime import datetime
import os

app = FastAPI(title="Agent System API")

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TaskRequest(BaseModel):
    agent: str
    task: str
    priority: Optional[str] = "medium"

class BatchTaskRequest(BaseModel):
    tasks: List[TaskRequest]
    execution_mode: Optional[str] = "parallel"  # parallel –∏–ª–∏ sequential

class Agent:
    def __init__(self, agent_id: str, name: str, skills: List[str]):
        self.id = agent_id
        self.name = name
        self.skills = skills
        self.status = "idle"
        self.current_task = None
        
    async def execute(self, task: str) -> Dict[str, Any]:
        self.status = "working"
        self.current_task = task
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(2)
        
        result = {
            "task_id": str(uuid.uuid4()),
            "agent": self.id,
            "task": task,
            "status": "completed",
            "result": f"‚úÖ {self.name} –∑–∞–≤–µ—Ä—à–∏–ª: {task}",
            "timestamp": datetime.now().isoformat()
        }
        
        self.status = "idle"
        self.current_task = None
        
        return result

# –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤
class AgentSystem:
    def __init__(self):
        self.agents = {
            "researcher": Agent("researcher", "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å üîç", ["–ø–æ–∏—Å–∫", "–∞–Ω–∞–ª–∏–∑", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]),
            "coder": Agent("coder", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üíª", ["–∫–æ–¥", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]),
            "tester": Agent("tester", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ üß™", ["—Ç–µ—Å—Ç—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–æ—Ç–ª–∞–¥–∫–∞"]),
            "reviewer": Agent("reviewer", "–†–µ–≤—å—é–µ—Ä üìã", ["–∫–æ–¥-—Ä–µ–≤—å—é", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]),
            "architect": Agent("architect", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä üèóÔ∏è", ["–¥–∏–∑–∞–π–Ω", "–ø–∞—Ç—Ç–µ—Ä–Ω—ã", "–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"]),
            "devops": Agent("devops", "DevOps üöÄ", ["–¥–µ–ø–ª–æ–π", "CI/CD", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])
        }
        self.task_history = []
        self.active_tasks = {}
        
    async def execute_task(self, agent_id: str, task: str) -> Dict[str, Any]:
        if agent_id not in self.agents:
            raise ValueError(f"Agent {agent_id} not found")
            
        agent = self.agents[agent_id]
        result = await agent.execute(task)
        self.task_history.append(result)
        
        return result
        
    async def execute_batch(self, tasks: List[TaskRequest], mode: str = "parallel") -> List[Dict[str, Any]]:
        if mode == "parallel":
            coroutines = [
                self.execute_task(task.agent, task.task) 
                for task in tasks
            ]
            results = await asyncio.gather(*coroutines)
        else:
            results = []
            for task in tasks:
                result = await self.execute_task(task.agent, task.task)
                results.append(result)
                
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
agent_system = AgentSystem()

# WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
active_connections: List[WebSocket] = []

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    active_connections.append(websocket)
    
    try:
        while True:
            data = await websocket.receive_text()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ WebSocket
            command = json.loads(data)
            
            if command["type"] == "execute_task":
                result = await agent_system.execute_task(
                    command["agent"], 
                    command["task"]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                for connection in active_connections:
                    await connection.send_json(result)
                    
    except Exception as e:
        active_connections.remove(websocket)

# REST API endpoints
@app.get("/")
async def root():
    return {
        "message": "Agent System API",
        "version": "1.0",
        "endpoints": {
            "/agents": "Get all agents",
            "/execute": "Execute single task",
            "/batch": "Execute batch tasks",
            "/history": "Get task history",
            "/status": "System status"
        }
    }

@app.get("/agents")
async def get_agents():
    agents_info = []
    for agent_id, agent in agent_system.agents.items():
        agents_info.append({
            "id": agent.id,
            "name": agent.name,
            "skills": agent.skills,
            "status": agent.status,
            "current_task": agent.current_task
        })
    return {"agents": agents_info}

@app.post("/execute")
async def execute_task(task_request: TaskRequest):
    try:
        result = await agent_system.execute_task(
            task_request.agent,
            task_request.task
        )
        return result
    except ValueError as e:
        return JSONResponse(
            status_code=400,
            content={"error": str(e)}
        )

@app.post("/batch")
async def execute_batch(batch_request: BatchTaskRequest):
    results = await agent_system.execute_batch(
        batch_request.tasks,
        batch_request.execution_mode
    )
    return {
        "execution_mode": batch_request.execution_mode,
        "total_tasks": len(batch_request.tasks),
        "results": results
    }

@app.get("/history")
async def get_history(limit: int = 50):
    history = agent_system.task_history[-limit:]
    return {
        "total": len(agent_system.task_history),
        "showing": len(history),
        "history": history
    }

@app.get("/status")
async def get_status():
    active_agents = sum(
        1 for agent in agent_system.agents.values() 
        if agent.status == "working"
    )
    
    return {
        "total_agents": len(agent_system.agents),
        "active_agents": active_agents,
        "total_tasks_completed": len(agent_system.task_history),
        "websocket_connections": len(active_connections)
    }

@app.get("/templates")
async def get_templates():
    """–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞—á"""
    return {
        "templates": [
            {
                "name": "–°–æ–∑–¥–∞—Ç—å REST API",
                "tasks": [
                    {"agent": "architect", "task": "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É API"},
                    {"agent": "coder", "task": "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å endpoints"},
                    {"agent": "tester", "task": "–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã API"},
                    {"agent": "reviewer", "task": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"}
                ]
            },
            {
                "name": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥",
                "tasks": [
                    {"agent": "researcher", "task": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–≥–∞"},
                    {"agent": "coder", "task": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"},
                    {"agent": "tester", "task": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"},
                    {"agent": "reviewer", "task": "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"}
                ]
            },
            {
                "name": "–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                "tasks": [
                    {"agent": "researcher", "task": "–ò–∑—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"},
                    {"agent": "architect", "task": "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"},
                    {"agent": "coder", "task": "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"},
                    {"agent": "tester", "task": "–ü–æ–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–∞–º–∏"},
                    {"agent": "devops", "task": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –¥–µ–ø–ª–æ—é"}
                ]
            }
        ]
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)